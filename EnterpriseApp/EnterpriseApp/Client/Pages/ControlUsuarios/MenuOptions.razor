@page "/menuoptions"
@using EnterpriseApp.Shared.Entities;
@inject HttpClient http
@inject IJSRuntime jsRuntime
@inject AppState appState 

<RedirectToLogin />

   <section class="content">

            <br />
            <h3 style="margin-left:1em">Opciones menú </h3>
            <p style="margin:1em 2em" class="label-default">
                Opciones de menú por aplicación .
            </p> <div style="margin:1em 2em" class="text-danger">@((MarkupString)Message)</div>
            <br />

             <div class="row" style="margin:0 auto; max-width:900px">
        <div class="col-md-6" >
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        Aplicacion
                    </span>
                </div>
                <select id="ddmenu" @bind="CheckSelected" class="form-control">
                    @foreach (var r in apps.OrderBy(a=>a.Value))
                    {
                        <option value="@r.Id"> @r.Value </option>
                    }
                </select>
            </div>
        </div>

         <div class="col-md-6" >
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">
                        Menú 
                    </span>
                </div>
                <select id="ddmenu" @bind="CheckSelectedMenu" class="form-control">
                    @foreach (var r in _app.Menus.OrderBy(a=>a.Name))
                    {
                        <option value="@r.Id"> @r.Name </option>
                    }
                </select>
            </div>
        </div>

    </div>

                    <div class="row">
                <div class="col-md-12" style="max-width:900px; margin:1em auto 1em auto">


                <div class="card card-info card-outline">
                  <div class="card-header">
@if (loading) {
<div class="spinner-border text-info" style="font-size:small" role="status"><span class="sr-only">Loading...</span></div>                          
}                   
                    <div class="card-tools">

                         <button class="btn btn-default btn-sm" @onclick="(()=>OpenModal( new EnterpriseApp.Shared.Entities.MenuOpton()))">
                                                        <i class="fa fa-plus"></i> <span style="font-size:small" >AGREGAR</span> 
                                                    </button>


                      <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                    </div>
                  </div>
                  <div class="card-body table-responsive p-0">
                    <table id="tbdata" class="table table-striped table-valign-middle">
                      <thead>
                      <tr>
                        <th>Opción</th>
                        <th>Descripción</th>
                        <th>URL</th>
                        <th>Icono</th>
                        <th>Indice</th>
                        <th style="width:10%">Inactivo</th>
                      </tr>
                      </thead>
                      <tbody>

                                @foreach (var item in opciones)
                                {
<tr @onclick="(()=>OpenModal(item))">
<td>@item.Name</td><td>@item.Descripcion</td><td>@item.Url</td><td>@item.Icon</td><td>@item.Index</td>
<td>
@if (item.Inactive)
{
<div class="custom-control custom-switch custom-switch-off-danger">
<input id="customSwitch1" type="checkbox" class="custom-control-input" checked disabled>
<label class="custom-control-label" for="customSwitch1"></label>
</div>
} else
{
<div class="custom-control custom-switch "> 
<input id="customSwitch2" type="checkbox" class="custom-control-input" disabled>
<label class="custom-control-label" for="customSwitch2"></label>
</div>
}
</td>
</tr>
                                }

                      </tbody>
                    </table>
                  </div>
                </div>

            </div>
            </div>
        </section>

            <div class="modal fade @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
            <div id="dv-overlay">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalTitle">Opción</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        <EditForm Model="menuOpton" OnValidSubmit="FrmSubmit">
                            <DataAnnotationsValidator />

                            <input asp-for="Input.Id" type="hidden" />
                            <div class="modal-body">

                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group">
                                    <InputText @bind-Value=menuOpton.Name class="form-control" placeholder="Nombre" />
                                </div>
                               
                                <div class="form-group">
                                    <InputText @bind-Value=menuOpton.Descripcion class="form-control" placeholder="Descripcion" />
                                </div>
                                 <div class="form-group">
                                    <InputText @bind-Value=menuOpton.Url class="form-control" placeholder="Url" />
                                </div>
                                 <div class="form-group">
                                    <InputText @bind-Value=menuOpton.Icon class="form-control" placeholder="Icono" />
                                </div><div class="form-group">
                                    <InputNumber @bind-Value=menuOpton.Index class="form-control" placeholder="Indice" />
                                </div>
                                <div class="fg1 form-group">
                                    <div class="custom-control custom-checkbox">
                                        <InputCheckbox @bind-Value="menuOpton.Inactive" id="regInactive" 
                                        class="custom-control-input custom-control-input-danger" />
                              <label for="regInactive" class="custom-control-label" > INACTIVO </label>
                            </div>
                                </div>
                                <div class="col-12">
                                    <span style="font-size:12px" class="text-danger"><ValidationSummary /> @Message </span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <span class="d-flex flex-grow-1" style="float:left; font-size:x-small" >
                                    @menuOpton.CreatedDate.ToString("dd-MM-yyyy hh:mm tt") * 
                                    @menuOpton.CreatedBy
                                 </span>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cerrar</button>
                                <button id="btnSave" type="submit" class="btn btn-primary">Guardar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>

@code {

    private List<ListItem> apps = new List<ListItem>();
    private string selectedItem { get; set; } = "";
    private string selectedItemMenu { get; set; } = "";
    private string CheckSelected
    {
        get
        {
            return selectedItem;
        }
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs();
            selectedEventArgs.Value = value;
            OnChangeSelected(selectedEventArgs);
        }
    }
    private string CheckSelectedMenu
    {
        get
        {
            return selectedItemMenu;
        }
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs();
            selectedEventArgs.Value = value;
            OnChangeSelectedMenu(selectedEventArgs);
        }
    }
    private async void OnChangeSelected(ChangeEventArgs e)
    {
        loading = true;
        selectedItem = e.Value?.ToString() ?? "";
        _app = await GetApplication(selectedItem);
        opciones.Clear();
        loading = false;
        StateHasChanged();
    }

    private void OnChangeSelectedMenu(ChangeEventArgs e)
    {
        selectedItemMenu = e.Value?.ToString() ?? "" ;

        if (_app.Menus.First(a => a.Id == selectedItemMenu).Options.Count() == 0)
        {
            _app.Menus.First(a => a.Id == selectedItemMenu).Options = new List<MenuOpton>();
        }
        opciones = _app.Menus.First(a => a.Id == selectedItemMenu).Options;

        StateHasChanged();
    }

    IJSObjectReference module;
    bool loading = true; 
    private string Message = "", ModalDisplay = "", ModalClass = "";

    private EnterpriseApp.Shared.Entities.App _app = new EnterpriseApp.Shared.Entities.App();
    private List<MenuOpton> opciones = new List<MenuOpton>(); 
    private MenuOpton menuOpton = new MenuOpton();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/profile.js?1");

            apps = await http.GetFromJsonAsync<List<ListItem>>(
                $"/api/App/Items", new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ListItem>();

            selectedItem = apps.FirstOrDefault()?.Id ?? "" ;

            _app = await GetApplication(selectedItem);

            selectedItemMenu = _app.Menus.FirstOrDefault()?.Id ?? "";

            opciones = (_app.Menus.FirstOrDefault()?.Options?.ToList() ?? new List<MenuOpton>()) ;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }

        loading = false;
    }

    private async Task<EnterpriseApp.Shared.Entities.App> GetApplication(string id) => 
                                    await http.GetFromJsonAsync<EnterpriseApp.Shared.Entities.App>(
                $"/api/App/{id}", new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) 
                ?? new EnterpriseApp.Shared.Entities.App();

    public async Task OpenModal( MenuOpton reg)
    {
        if (_app.Menus.Count() == 0) { return; }
        menuOpton = reg;
        ModalDisplay = "block;";
        await Task.Delay(100);
        ModalClass = "show";
    }

    public async Task CloseModal()
    {
        ModalClass = "";
        await Task.Delay(250);
        ModalDisplay = "none;";
    }

    private async void FrmSubmit()
    {
        await CloseModal();

        try
        {
            var reg = opciones.FirstOrDefault(a=>a.Id==menuOpton.Id);

            if (reg == null) { 
                if (menuOpton.CreatedBy == "") { menuOpton.CreatedBy = appState.UserName; }
                opciones.Add(menuOpton); }
            else
            {
                reg.Name = menuOpton.Name; reg.Url = menuOpton.Url; reg.Icon = menuOpton.Icon; reg.Index = menuOpton.Index;
                reg.Descripcion = menuOpton.Descripcion; reg.Inactive = menuOpton.Inactive;
            }

            _app.Menus.First(a => a.Id == selectedItemMenu).Options = opciones;
            
            var postResult = await http.PostAsJsonAsync("/api/App/SaveRol", _app);

            var postContent = (await postResult.Content.ReadAsStringAsync());

            if (postResult.IsSuccessStatusCode)
            {
                    _app = JsonSerializer.Deserialize<EnterpriseApp.Shared.Entities.App>(postContent, 
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new EnterpriseApp.Shared.Entities.App();

                await module.InvokeAsync<bool>("showMsg", "success", "Guardado!");
            }
            else
            {
                await module.InvokeAsync<bool>("showMsg", "error", postContent);
            }
        }
        catch (Exception ex) { 
            Message = "E:" + ex.Message; 
        }

        await InvokeAsync(StateHasChanged);
    }

}