@inject IJSRuntime JS
@inject NavigationManager uriHelper;

<div id="ModalFirma" class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay;">
        <div id="dv-overlay">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
            @Title
            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
                            <div class="modal-body" style=" background-color: #f5f5f5;min-height:210px;">
<div class="wrapper">
  <canvas id="signature-pad" style="height:180px" class="signature-pad"></canvas>
</div>
  <p class="ftitle">FIRME AQUI</p>



                            </div>
                    @Body

                 <div class="modal-footer justify-content-between">

<button id="btnAutorizar" type="button" @onclick="Save" class="btn btn-outline-primary"><i class="fas fa-check-circle"></i> Guardar </button>
<button id="clear"  type="button" class="btn btn-outline-default"> <i class="fas fa-eraser"></i> Borrar</button>

      </div>
                </div>
            </div>
        </div>
    </div>

    @if (showBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

@code {

    [Parameter]
    public EventCallback<bool> ReloadCallback { get; set; }

    [Parameter]
    public RenderFragment Title { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public string RegId { get; set; } = "";

    [Parameter]
    public string Usuario { get; set; } = "";

    [Parameter]
    public string TipoFirma { get; set; } = "acuerdos";

    protected override async Task OnInitializedAsync()
    {
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/signature_pad.umd.js?28" + DateTime.Now.Ticks.ToString());
    }

    IJSObjectReference module; //private MarkupString text;

    private async Task Save()
    {
        try
        {
            bool res = await module.InvokeAsync<bool>("Save", Usuario, TipoFirma, RegId);
        }
        catch (Exception ex) { Console.WriteLine(ex.Message); }
        await ReloadCallback.InvokeAsync(false);
        //await module.InvokeAsync<bool>("showMsg", "success", "Guardado!");
        Close();
    }

    private async Task Clear()
    {
        await module.InvokeAsync<bool>("Clear");
    }


    private string modalDisplay = "none;";
    private string modalClass = "";
    private bool showBackdrop = false;

    public async Task Open()
    {
        await Clear();
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;
        await Task.Delay(300);
        StateHasChanged();
        try
        {
            await module.InvokeAsync<bool>("SetSignaturePad");
        }
        catch (Exception ex) { Console.WriteLine(ex.Message); }
    }

        public void Close()
        {
            modalDisplay = "none";
            modalClass = "";
            showBackdrop = false;
        }

    }
